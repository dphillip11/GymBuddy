from channels.generic.websocket import WebsocketConsumer
import json

# project
from WorkoutPlanner.views.metrics import fetch_exercise_records


class UpdateItemsConsumer(WebsocketConsumer):
    def connect(self):
        # Join the update group
        self.channel_layer.group_add(
            "update_group",
            self.channel_name
        )
        self.accept()

    def disconnect(self, close_code):
        # Leave the update group
        self.channel_layer.group_discard(
            "update_group",
            self.channel_name
        )

    # Handler for the `update_message` type
    def update_message(self, event):
        element_id = event['element_id']
        new_content = event['new_content']
        append = event['append']

        # Send message to WebSocket
        self.send(text_data=json.dumps({
            'element_id': element_id,
            'new_content': new_content,
            'append': append
        }))


class ExerciseRecordConsumer(WebsocketConsumer):
    def connect(self):
        self.user = self.scope["user"]
        print(self.user)
        # if self.user.is_authenticated:
        self.accept()
        # else:
        #     self.close()

    def receive(self, text_data):
        data = json.loads(text_data)
        exercise_id = data.get('exercise_id')
        muscle_group_id = data.get('muscle_group_id')
        start_date = data.get('start_date')
        end_date = data.get('end_date')

<<<<<<< HEAD
        # Fetch exercise records related to the specific user
        records = fetch_exercise_records(
            # user=self.user, 
            exercise_id=exercise_id, 
            muscle_group_id=muscle_group_id, 
            metric=metric, 
            start_date=start_date, 
            end_date=end_date
        )
=======
        records = fetch_exercise_records(exercise_id, muscle_group_id, start_date, end_date)
>>>>>>> parent of b137379 (added max lift metric)

        # Send records back to the WebSocket
        self.send(text_data=json.dumps(records))
